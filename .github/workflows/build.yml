name: Build

on:
  push:
    paths:
      - '**.cpp'
      - '**.hpp'
      - '**.cmake'
      - '**.cmake.in'
      - '**/CMakeLists.txt'
      - '.github/workflows/build.yml'
      - 'deps/**'
      - 'sonar-project.properties'
      - 'vcpkg.json'
      - 'CMakePresets.json'

permissions:
  contents: read
  actions: read
  checks: write

env:
  VCPKG_VERSION: 'fd22bbac96555f6c43ee35f143a634daed53369c'
  CMAKE_ARGS: '"-DCMAKE_BUILD_TYPE=Release", "-DASIO_GRPC_ENABLE_PKGCONFIG_FALLBACK=off", "-DCMAKE_COMPILE_WARNING_AS_ERROR=on", "-DCMAKE_FIND_PACKAGE_PREFER_CONFIG=on", "-DTHREADS_PREFER_PTHREAD_FLAG=on", "-DCMAKE_UNITY_BUILD=on"'
  CMAKE_BUILD_PARALLEL_LEVEL: 4
  USERNAME: Tradias
  FEED_URL: https://nuget.pkg.github.com/Tradias/index.json
  VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/Tradias/index.json,readwrite"

jobs:
  # region: windows
  windows-build:
    name: Windows/2022/MSVC
    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v4

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ runner.workspace }}/vcpkg'
        vcpkgGitCommitId: '${{ env.VCPKG_VERSION }}'

    - name: Add NuGet sources
      shell: pwsh
      run: |
        ${{ env.VCPKG_ROOT }}/vcpkg fetch nuget
        .$(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget) `
          sources add `
          -Source "${{ env.FEED_URL }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.USERNAME }}" `
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
        .$(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget) `
          setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" `
          -Source "${{ env.FEED_URL }}"

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'default'
        configurePresetAdditionalArgs: '["-GNinja", ${{ env.CMAKE_ARGS }}, "-DVCPKG_TARGET_TRIPLET=x64-windows-release", "-DVCPKG_HOST_TRIPLET=x64-windows-release", "-DCMAKE_COMPILE_WARNING_AS_ERROR=off"]'
        buildPreset: 'default'
        buildPresetAdditionalArgs: '["--config", "Release"]'
        testPreset: 'default'
        testPresetAdditionalArgs: '["-C", "Release"]'

    - name: Create test report
      uses: EnricoMi/publish-unit-test-result-action/windows@v2
      if: success() || failure()
      with:
        check_name: 'Windows tests'
        files: 'build/junit.xml'
        comment_mode: 'off'


  # region: macos
  macos-build:
    name: 'MacOS/13/AppleClang'
    runs-on: macos-13

    steps:
    - uses: actions/checkout@v4

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ runner.workspace }}/vcpkg'
        vcpkgGitCommitId: '${{ env.VCPKG_VERSION }}'

    - name: Add NuGet sources
      shell: pwsh
      run: |
        ${{ env.VCPKG_ROOT }}/vcpkg fetch nuget
        mono $(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget) `
          sources add `
          -Source "${{ env.FEED_URL }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.USERNAME }}" `
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
        mono $(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget) `
          setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" `
          -Source "${{ env.FEED_URL }}"

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'default'
        configurePresetAdditionalArgs: '[${{ env.CMAKE_ARGS }}, "-DVCPKG_TARGET_TRIPLET=x64-osx-release", "-DVCPKG_HOST_TRIPLET=x64-osx-release", "-DCMAKE_BUILD_TYPE=Debug", "-DASIO_GRPC_HAS_STD_PMR=off", "-DCMAKE_UNITY_BUILD=off"]'
        buildPreset: 'default'
        testPreset: 'default'

    - name: Create test report
      uses: EnricoMi/publish-unit-test-result-action/macos@v2
      if: success() || failure()
      with:
        check_name: 'MacOS latest tests'
        files: 'build/junit.xml'
        comment_mode: 'off'


  # region: gcc 10
  gcc-10-build:
    name: 'Ubuntu/22.04/Default'
    runs-on: ubuntu-22.04
    env:
      VCPKG_DEFAULT_TRIPLET: 'x64-linux-release'
      VCPKG_DEFAULT_HOST_TRIPLET: 'x64-linux-release'
      VCPKG_INSTALLED_DIR: '${{ github.workspace }}/../vcpkg_installed'

    steps:
    - name: Make gcc-10 default compiler
      run: |
        sudo update-alternatives --install /usr/bin/cc cc $(which gcc-10) 50 &&\
        sudo update-alternatives --set cc $(which gcc-10) &&\
        sudo update-alternatives --install /usr/bin/c++ c++ $(which g++-10) 50 &&\
        sudo update-alternatives --set c++ $(which g++-10)

    - name: Install protobuf, gRPC, doctest
      run: sudo apt-get install libgrpc++-dev protobuf-compiler-grpc libprotobuf-dev doctest-dev libgtest-dev libgmock-dev

    - uses: actions/checkout@v4

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ runner.workspace }}/vcpkg'
        vcpkgGitCommitId: '${{ env.VCPKG_VERSION }}'

    - name: Add NuGet sources
      shell: pwsh
      run: |
        ${{ env.VCPKG_ROOT }}/vcpkg fetch nuget
        mono $(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget) `
          sources add `
          -Source "${{ env.FEED_URL }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.USERNAME }}" `
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
        mono $(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget) `
          setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" `
          -Source "${{ env.FEED_URL }}"

    - name: Run vcpkg
      run: |
        ${{ env.VCPKG_ROOT }}/vcpkg install --recurse --clean-after-build \
          --x-install-root=${{ env.VCPKG_INSTALLED_DIR }} --overlay-ports=${{ github.workspace }}/deps --overlay-triplets=${{ github.workspace }}/.github/vcpkg \
          libunifex boost-coroutine boost-asio boost-interprocess boost-thread boost-process asio[coroutine]
      working-directory: ${{ env.VCPKG_ROOT }}

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'default'
        configurePresetAdditionalArgs: '[${{ env.CMAKE_ARGS }}, "-DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }}", "-DVCPKG_HOST_TRIPLET=${{ env.VCPKG_DEFAULT_HOST_TRIPLET }}", "-DVCPKG_INSTALLED_DIR=${{ env.VCPKG_INSTALLED_DIR }}", "-DVCPKG_MANIFEST_INSTALL=off", "-DASIO_GRPC_ENABLE_CPP20_TESTS_AND_EXAMPLES=off", "-DASIO_GRPC_ENABLE_CMAKE_INSTALL_TEST=off", "-DASIO_GRPC_ENABLE_PKGCONFIG_FALLBACK=on", "-DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold"]'
        buildPreset: 'default'
        buildPresetAdditionalArgs: '["--config", "Release", "--target", "asio-grpc-check-header-syntax", "all"]'
        testPreset: 'default'
        testPresetAdditionalArgs: '["-C", "Release"]'

    - name: Create test report
      uses: EnricoMi/publish-unit-test-result-action/linux@v2
      if: success() || failure()
      with:
        check_name: 'GCC 10 tests'
        files: 'build/junit.xml'
        comment_mode: 'off'


  # region: gcc latest
  gcc-latest-build:
    name: 'Ubuntu/24.04/GCC'
    runs-on: ubuntu-24.04

    steps:
    - name: Make gcc-14 default compiler
      run: |
        sudo update-alternatives --install /usr/bin/cc cc $(which gcc-14) 50 &&\
        sudo update-alternatives --set cc $(which gcc-14) &&\
        sudo update-alternatives --install /usr/bin/c++ c++ $(which g++-14) 50 &&\
        sudo update-alternatives --set c++ $(which g++-14)

    - name: Install mono
      run: sudo apt-get install mono-complete

    - run: pip install gcovr

    - uses: actions/checkout@v4
      with:
        # Disabling shallow clone is recommended for improving relevancy of sonarsource reporting
        fetch-depth: 0

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ runner.workspace }}/vcpkg'
        vcpkgGitCommitId: '${{ env.VCPKG_VERSION }}'

    - name: Add NuGet sources
      shell: pwsh
      run: |
        ${{ env.VCPKG_ROOT }}/vcpkg fetch nuget
        mono $(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget) `
          sources add `
          -Source "${{ env.FEED_URL }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.USERNAME }}" `
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
        mono $(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget) `
          setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" `
          -Source "${{ env.FEED_URL }}"

    - name: Set env
      run: echo "GCOV_PROGRAM=$(which gcov-14)" >> "$GITHUB_ENV"

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'default'
        configurePresetAdditionalArgs: '[${{ env.CMAKE_ARGS }}, "-DVCPKG_TARGET_TRIPLET=x64-linux-release", "-DVCPKG_HOST_TRIPLET=x64-linux-release", "-DASIO_GRPC_ENABLE_CMAKE_INSTALL_TEST=off", "-DCMAKE_EXPORT_COMPILE_COMMANDS=on", "-DASIO_GRPC_TEST_COVERAGE=on", "-DASIO_GRPC_GCOV_PROGRAM=${{ env.GCOV_PROGRAM }}", "-DASIO_GRPC_COVERAGE_OUTPUT_FILE=${{ github.workspace }}/build/sonarqube-coverage.xml", "-DCMAKE_BUILD_TYPE=Debug", "-DCMAKE_UNITY_BUILD=off", "-DASIO_GRPC_ENABLE_STDEXEC_TESTS=on", "-DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold", "-DCMAKE_DISABLE_PRECOMPILE_HEADERS=on"]'
        buildPreset: 'default'
        testPreset: 'default'

    - name: Create test report
      uses: EnricoMi/publish-unit-test-result-action/linux@v2
      if: success() || failure()
      with:
        check_name: 'GCC latest tests'
        files: 'build/junit.xml'
        comment_mode: 'off'

    - name: GCC Coverage
      run: cmake --build --preset default --target asio-grpc-test-coverage

    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Download sonar-scanner
      uses: warchant/setup-sonar-scanner@v8
      with:
        version: 5.0.1.3006

    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        sonar-scanner \
          "-Dsonar.cfamily.compile-commands=${{ github.workspace }}/build/compile_commands.json" \
          "-Dsonar.token=${{ secrets.SONAR_TOKEN }}" \
          "-Dsonar.coverageReportPaths=${{ github.workspace }}/build/sonarqube-coverage.xml"

  # region: clang 13
  clang-13-build:
    name: 'Ubuntu/22.04/Clang'
    runs-on: ubuntu-22.04

    steps:
    - name: Make clang-13 default compiler
      run: |
        sudo update-alternatives --install /usr/bin/cc cc $(which clang-13) 50 &&\
        sudo update-alternatives --set cc $(which clang-13) &&\
        sudo update-alternatives --install /usr/bin/c++ c++ $(which clang++-13) 50 &&\
        sudo update-alternatives --set c++ $(which clang++-13)

    - name: Install (old) cmake, libc++
      run: sudo apt-get install cmake libc++-13-dev libc++abi-13-dev

    - uses: actions/checkout@v4

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ runner.workspace }}/vcpkg'
        vcpkgGitCommitId: '${{ env.VCPKG_VERSION }}'

    - name: Add NuGet sources
      shell: pwsh
      run: |
        ${{ env.VCPKG_ROOT }}/vcpkg fetch nuget
        mono $(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget) `
          sources add `
          -Source "${{ env.FEED_URL }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.USERNAME }}" `
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
        mono $(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget) `
          setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" `
          -Source "${{ env.FEED_URL }}"

    - name: Set env
      run: echo "CLANG_PROGRAM=$(which clang++-13)" >> "$GITHUB_ENV"

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'default'
        configurePresetAdditionalArgs: '[${{ env.CMAKE_ARGS }}, "-DCMAKE_CXX_COMPILER=${{ env.CLANG_PROGRAM }}", "-DVCPKG_OVERLAY_TRIPLETS=${{ github.workspace }}/.github/vcpkg", "-DVCPKG_TARGET_TRIPLET=x64-linux-clang13-release", "-DVCPKG_HOST_TRIPLET=x64-linux-clang13-release", "-DCMAKE_DISABLE_PRECOMPILE_HEADERS=on", "-DASIO_GRPC_CMAKE_INSTALL_TEST_CTEST_COMMAND=/usr/bin/ctest", "-DCMAKE_CXX_FLAGS=-stdlib=libc++ -stdlib++-isystem /usr/lib/llvm-13/include/c++/v1/ -Wno-unused-command-line-argument", "-DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=lld"]'
        buildPreset: 'default'
        buildPresetAdditionalArgs: '["--config", "Release"]'
        testPreset: 'default'
        testPresetAdditionalArgs: '["-C", "Release"]'

    - name: Create test report
      uses: EnricoMi/publish-unit-test-result-action/linux@v2
      if: success() || failure()
      with:
        check_name: 'Clang 13 tests'
        files: 'build/junit.xml'
        comment_mode: 'off'


  # region: clang latest
  clang-latest-build:
    name: 'Ubuntu/24.04/Clang'
    runs-on: ubuntu-24.04

    steps:
    - name: Install dot for doxygen, libc++ and mono
      run: sudo apt-get install graphviz libc++-18-dev mono-complete

    - uses: actions/checkout@v4

    - name: Install vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ runner.workspace }}/vcpkg'
        vcpkgGitCommitId: '${{ env.VCPKG_VERSION }}'

    - name: Add NuGet sources
      shell: pwsh
      run: |
        ${{ env.VCPKG_ROOT }}/vcpkg fetch nuget
        mono $(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget) `
          sources add `
          -Source "${{ env.FEED_URL }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.USERNAME }}" `
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
        mono $(${{ env.VCPKG_ROOT }}/vcpkg fetch nuget) `
          setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" `
          -Source "${{ env.FEED_URL }}"

    - name: Download doxygen
      working-directory: ${{ runner.workspace }}
      run: |
        cmake -E make_directory doxygen &&\
        cd doxygen &&\
        wget --quiet https://download.sourceforge.net/project/doxygen/rel-1.12.0/doxygen-1.12.0.linux.bin.tar.gz &&\
        tar xf doxygen-1.12.0.linux.bin.tar.gz --strip-components=1

    - name: Set env
      run: echo "CLANG_PROGRAM=$(which clang++)" >> "$GITHUB_ENV"

    - name: Run CMake for examples
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'default'
        configurePresetAdditionalArgs: '[${{ env.CMAKE_ARGS }}, "-DCMAKE_CXX_COMPILER=${{ env.CLANG_PROGRAM }}", "-DASIO_GRPC_BUILD_TESTS=off", "-DASIO_GRPC_BUILD_EXAMPLES=on", "-DVCPKG_OVERLAY_TRIPLETS=${{ github.workspace }}/.github/vcpkg", "-DVCPKG_TARGET_TRIPLET=x64-linux-clang-latest-release", "-DVCPKG_HOST_TRIPLET=x64-linux-clang-latest-release", "-DCMAKE_DISABLE_PRECOMPILE_HEADERS=on", "-DASIO_GRPC_ENABLE_CMAKE_INSTALL_TEST=off", "-DCMAKE_CXX_FLAGS=-stdlib=libc++ -Wno-unused-command-line-argument", "-DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=lld"]'
        buildPreset: 'default'
        buildPresetAdditionalArgs: '["--config", "Release"]'

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'default'
        configurePresetAdditionalArgs: '["-DDOXYGEN_EXECUTABLE=${{ runner.workspace }}/doxygen/bin/doxygen", "-DASIO_GRPC_BUILD_TESTS=on"]'
        buildPreset: 'default'
        buildPresetAdditionalArgs: '["--config", "Release", "--target", "asio-grpc-check-header-syntax", "all"]'
        testPreset: 'default'
        testPresetAdditionalArgs: '["-C", "Release"]'

    - name: Create test report
      uses: EnricoMi/publish-unit-test-result-action/linux@v2
      if: success() || failure()
      with:
        check_name: 'Clang latest tests'
        files: 'build/junit.xml'
        comment_mode: 'off'

    - name: Run doxygen
      run: |
        cmake -E make_directory ${{ github.workspace }}/docs &&\
        cmake -E touch ${{ github.workspace }}/docs/.nojekyll &&\
        cmake --build ${{ github.workspace }}/build --config Release --target asio-grpc-doxygen

    - name: Push doxygen changes
      if: ${{ github.ref_name == 'master' }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -f docs/.nojekyll || echo "nothing to add"
        git add -f docs/* || echo "nothing to add"
        remote="https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
        git commit -m "Re-generate Github Pages" && \
        git push --force "${remote}" $(git log -n 1 --pretty=format:"%H"):gh-pages || echo "nothing to push"
      shell: bash
